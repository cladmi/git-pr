#! /bin/bash

usage() {
    echo 'Usage: git pr [-h|help] [options]'
    echo '    git pr <upstream> <pull_request>'
    echo '        Fetch given pull request on a local branch and switch to it'
    echo '    git pr update'
    echo '        Update current pull request'
    echo '    git pr'
    echo '        List local pull requests branches'
}

main() {
    if [ $# -eq 0 ]; then
        _list_branches
        return 0
    elif [[ "${@#-h}" != "$@" ]] || [[ "${@#help}" != "$@" ]]; then
        usage
        return 0
    elif [[ $# -eq 1 ]] && [[ "${1}" = "update" ]]; then
        _update_current_pr
        return 1
    elif [ $# -ne 2 ]; then
        usage
        return 1
    else
        _checkout_pull_request "$1" "$2"
        return 0
    fi
}

_list_branches() {
    git branch --list 'pr/[^/]*/[0-9]*/*'
}

_get_current_branch() {
    git rev-parse --abbrev-ref HEAD
}

_update_current_pr() {
    if [[ ! $(_get_current_branch) =~ ^pr/[^/]+/[0-9]+/.*$ ]]; then
        echo "Current branch '$(_get_current_branch)' not a PR branch" >&2
        exit 1;
    fi

    local upstream=$(_get_current_branch | sed 's|/| |g' | cut -f 2 -d' ')
    local pr=$(_get_current_branch | sed 's|/| |g' | cut -f 3 -d' ')
    _checkout_pull_request "${upstream}" "${pr}"
}

_checkout_pull_request() {
    set -e

    local upstream=$1
    local pr=$2

    echo "Fetching $(git remote get-url ${upstream})[#${pr}]"
    local remote="refs/pull/$pr/head"
    local name=$(safe_name "$upstream" "$pr")
    local pr_branch="pr/${upstream}/${pr}/${name}"

    git fetch -fu "${upstream}" "$remote":"${pr_branch}"
    git checkout "${pr_branch}"
}


readonly PULL_REQUEST_URL="https://api.github.com/repos/%s/%s/pulls/%s"
_pull_request_url() {
    local owner="$1"
    local repo="$2"
    local number="$3"

    printf "${PULL_REQUEST_URL}\n" "${owner}" "${repo}" "${number}"
}


# _split_github_url git@github.com:RIOT-OS/RIOT
# _split_github_url https://github.com/RIOT-OS/RIOT.git
# RIOT-OS RIOT
_split_github_url() {
    sed -e 's/.*github.com.//' -e 's/.git//' -e 's+/+ +'
}

# pull_request_url riot 1234
# https://api.github.com/repos/RIOT-OS/RIOT/pulls/1234
pull_request_url() {
    local remote="$1"
    local pr="$2"

    local split=$(git remote get-url "${remote}" | _split_github_url)

    # expand 'split' in two parts
    _pull_request_url $split "${pr}"
}


# Keep only alpha-numerical characters
_sanitize_title() {
    iconv -c -f utf-8 -t ascii | \
        sed 's/[^a-zA-Z0-9]/_/g'
}


# Json extract using grep and sed
_json_extract_title() {
    grep '"title"' | head -n 1 | sed -e 's/.*: //' -e 's/[",]//g'
}

safe_name() {
    local remote="$1"
    local pr="$2"
    local url=$(pull_request_url "${remote}" "${pr}")
    curl -s ${url} | _json_extract_title | _sanitize_title
}


main $@
exit $?
